import _ from 'lodash';
import moment from 'moment';
import React, {useState, Fragment} from 'react';
import {StyleSheet, View, ScrollView, Text, TouchableOpacity, SafeAreaView, SectionList} from 'react-native';
import {Agenda, Calendar} from 'react-native-calendars';
import colors from '../config/colors';
import AgendaScreen from './AgendaScreen';

const testIDs = require('../components/testIDs');

const CalendarsScreen = () => {
  const [selected, setSelected] = useState('');

  const onDayPress = day => {
    setSelected(day.dateString);
  };

  const getDisabledDates = (startDate, endDate, daysToDisable) => {
    const disabledDates = {};
    const start = moment(startDate);
    const end = moment(endDate);

    for (let m = moment(start); m.diff(end, 'days') <= 0; m.add(1, 'days')) {
      if (_.includes(daysToDisable, m.weekday())) {
        disabledDates[m.format('YYYY-MM-DD')] = {disabled: true};
      }
    }
    return disabledDates;
  };


  const renderCalendarWithMultiDotMarking = () => {
    return (
      <Fragment>
        <Calendar
          style={styles.calendar}
          current={'2020-12-21'}
          markingType={'multi-dot'}
          testID={testIDs.calendars.FIRST}
          hideExtraDays
          firstDay={1}
          showWeekNumbers={true}
          enableSwipeMonths={true}
          onDayPress={onDayPress}
          theme={{
            selectedDayBackgroundColor:colors.light,
            selectedDayTextColor:colors.danger,
            todayTextColor:'dodgerblue',
            todayTextBackgroundColor:"yellow",
            textDayFontWeight:'600',
            textMonthFontWeight:'bold',
            arrowColor: colors.dark,
            textSectionTitleColor: "#7f1d1d",         
  
            dayTextColor: 'red',
            backgroundColor: '#ffffff',
            calendarBackground: '#ffffff',
            textSectionTitleColor: '#b6c1cd',
            dayTextColor: colors.secondary,
            textDisabledColor: '#d9e1e8',
            dotColor: '#00adf5',
            selectedDotColor: '#ffffff',
            monthTextColor: colors.primary,
            textMonthFontWeight: 'bold',
            textDayFontSize: 16,
            textMonthFontSize: 16,
            textDayHeaderFontSize: 16
          }}
          markedDates={{
            '2020-12-12': {
              selected: true,
              dots: [
                {key: 'vacation', color: 'colors.danger', selectedDotColor: colors.a},
                {key: 'massage', color: 'colors.danger', selectedDotColor: colors.b}
              ]
            },
            '2020-12-25': {
              selected: true,
              dots: [
                {key: 'vacation', color: 'colors.danger', selectedDotColor: colors.a},
              ]
            },
            '2020-12-05': {
             // disabled: true,
              dots: [
                {key: 'vacation', color: 'colors.danger', selectedDotColor: colors.a},
                {key: 'massage', color: 'colors.danger', selectedDotColor: colors.b}
              ]
            }
          }}
        />
      </Fragment>
    );
  };


const renderAgenda = () => {
    return (
      <Fragment>
<Agenda
  // The list of items that have to be displayed in agenda. If you want to render item as empty date
  // the value of date key has to be an empty array []. If there exists no value for date key it is
  // considered that the date in question is not yet loaded
  items={{
    '2021-12-21': [{name: 'item 1 - any js object'}],
    '2021-12-12': [{name: 'item 2 - any js object', height: 80}],
    '2021-12-25': [],
    '2021-12-30': [{name: 'item 3 - any js object'}, {name: 'any js object'}]
  }}
  // Callback that gets called when items for a certain month should be loaded (month became visible)
  loadItemsForMonth={(month) => {console.log('trigger items loading')}}
  // Callback that fires when the calendar is opened or closed
  onCalendarToggled={(calendarOpened) => {console.log(calendarOpened)}}
  // Callback that gets called on day press
  onDayPress={(day)=>{console.log('day pressed')}}
  // Callback that gets called when day changes while scrolling agenda list
  onDayChange={(day)=>{console.log('day changed')}}
  // Initially selected day
  //selected={'2012-05-16'}
  // Minimum date that can be selected, dates before minDate will be grayed out. Default = undefined
  //minDate={'2012-05-10'}
  // Maximum date that can be selected, dates after maxDate will be grayed out. Default = undefined
  //maxDate={'2012-05-30'}
  // Max amount of months allowed to scroll to the past. Default = 50
  //pastScrollRange={50}
  // Max amount of months allowed to scroll to the future. Default = 50
  //futureScrollRange={50}
  // Specify how each item should be rendered in agenda
  renderItem={(item, firstItemInDay) => {return (<View />);}}
  // Specify how each date should be rendered. day can be undefined if the item is not first in that day.
  renderDay={(day, item) => {return (<View />);}}
  // Specify how empty date content with no items should be rendered
  renderEmptyDate={() => {return (<View />);}}
  // Specify how agenda knob should look like
  renderKnob={() => {return (<View />);}}
  // Specify what should be rendered instead of ActivityIndicator
  renderEmptyData = {() => {return (<View />);}}
  // Specify your item comparison function for increased performance
  rowHasChanged={(r1, r2) => {return r1.text !== r2.text}}
  // Hide knob button. Default = false
  hideKnob={true}
  // By default, agenda dates are marked if they have at least one item, but you can override this if needed
  markedDates={{
    '2012-05-16': {selected: true, marked: true},
    '2012-05-17': {marked: true},
    '2012-05-18': {disabled: true}
  }}
  // If disabledByDefault={true} dates flagged as not disabled will be enabled. Default = false
  disabledByDefault={true}
  // If provided, a standard RefreshControl will be added for "Pull to Refresh" functionality. Make sure to also set the refreshing prop correctly.
  onRefresh={() => console.log('refreshing...')}
  // Set this true while waiting for new data from a refresh
  refreshing={false}
  // Add a custom RefreshControl component, used to provide pull-to-refresh functionality for the ScrollView.
  refreshControl={null}
  // Agenda theme
  theme={{
    agendaDayTextColor: 'yellow',
    agendaDayNumColor: 'green',
    agendaTodayColor: 'red',
    agendaKnobColor: 'dodgerblue',

    selectedDayBackgroundColor:colors.light,
    selectedDayTextColor:colors.danger,
    todayTextColor:'dodgerblue',
    todayTextBackgroundColor:"yellow",
    textDayFontWeight:'600',
    textMonthFontWeight:'bold',
    arrowColor: colors.dark,
    textSectionTitleColor: "#7f1d1d",         

    dayTextColor: 'red',
    backgroundColor: '#ffffff',
    calendarBackground: '#ffffff',
    textSectionTitleColor: '#b6c1cd',
    dayTextColor: colors.secondary,
    textDisabledColor: '#d9e1e8',
    dotColor: '#00adf5',
    selectedDotColor: '#ffffff',
    monthTextColor: colors.primary,
    textMonthFontWeight: 'bold',
    textDayFontSize: 16,
    textMonthFontSize: 16,
    textDayHeaderFontSize: 16
  }}
  // Agenda container style
  style={{}}
/>
</Fragment>   );
  };

  return (
 <ScrollView showsVerticalScrollIndicator={false} testID={testIDs.calendars.CONTAINER}>
    {renderCalendarWithMultiDotMarking()}
    {renderAgenda()} 
</ScrollView>
  );
};

export default CalendarsScreen;

const styles = StyleSheet.create({
  calendar: {
    marginBottom: 10
  },
  text: {
    textAlign: 'center',
    padding: 10,
    backgroundColor: 'lightgrey',
    fontSize: 18,
    fontWeight:'600'
  }
});
